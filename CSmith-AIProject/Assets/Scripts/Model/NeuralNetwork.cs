
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using MathNet.Numerics.LinearAlgebra;
using MathNet.Numerics.LinearAlgebra.Double;

public class NeuralNetwork{

    public const int inputLayerSize = 15;
    public const int hiddenLayerSize = 48;
    public const double init_epsilon = 0.1;

    double[,] theta1Arr;
    double[] theta2Arr;

    Matrix<double> theta1; //input - hidden layer weights
    Matrix<double> theta2; //hidden - output layer weights

    Matrix<double> e_theta1; //eligibility trace for theta1;
    Matrix<double> e_theta2; //eligibility trace for theta2;

    //Initialize neuralnetwork from file
    public NeuralNetwork(string fileName)
    {
        //Basic arrays for reading data from txt file into
        theta1Arr = new double[hiddenLayerSize, inputLayerSize + 1];
        theta2Arr = new double[hiddenLayerSize + 1];


        if (GameManager.DEMO)
        {
            if (fileName == "7")
            {
                theta1Arr = new double[hiddenLayerSize, inputLayerSize + 1]{
                { -0.154541   , -0.0555854  , -0.118481  , -0.00266706,  0.0314902   ,-0.0006122  ,-0.121639   ,-0.0404182, -0.0552665  ,-0.00821155 , 0.034031   , -0.0400012   ,-0.0280416  ,-0.0784087   ,-0.110285   , 0.0220601       },
                { -0.0909832  ,  0.0448117  ,  0.0132928 ,  0.0698324 , -0.0259894   ,-0.0672303  ,-0.150131   ,-0.0186785, -0.107866   , 0.0624958  , 0.0315486  ,  0.0302877   ,-0.142364   ,-0.0767583   ,-0.118783   ,-0.0595092       },
                { -0.0443493  ,  0.146939   , -0.0285906 , -0.0155555 , -0.0988717   ,-0.033228   ,-0.180582   , 0.0201064,  0.0446495  ,-0.0735283  ,-0.0961607  , -0.00630275  ,-0.0586538  ,-0.105467    ,-0.0233996  ,-0.0655707       },
                { -0.106974   ,  0.215207   , -0.11408   ,  0.045788  ,  8.90588E-05 , 0.0276155  ,-0.156364   ,-0.0683054,  0.0247932  ,-0.115941   , 0.0379373  ,  0.0164858   , 0.0207281  ,-0.220607    , 0.0590053  ,-0.169455        },
                { -0.0555371  ,  0.138077   , -0.0552356 ,  0.137149  , -0.111535    ,-0.0806498  ,-0.0879265  ,-0.0173319, -0.0119684  ,-0.110172   , 0.0637001  ,  0.0664589   , 0.123656   ,-0.223791    ,-0.0495347  ,-0.166226        },
                { -0.0605716  ,  0.128666   , -0.159502  ,  0.086133  ,  0.0456438   , 0.0228408  ,-0.0260249  ,-0.0570706, -0.048723   ,-0.0287735  ,-0.0629207  ,  0.0835963   , 0.0519759  ,-0.281862    ,-0.0230593  ,-0.106417        },
                { -0.0726801  , -0.165395   ,  0.0331218 ,  0.013211  ,  0.0787753   ,-0.106204   ,-0.128245   ,-0.0785332, -0.135251   ,-0.0103336  ,-0.0829853  , -0.0641451   ,-0.0949452  ,-0.0270622   ,-0.0534286  ,-0.0351642       },
                {  0.0403573  ,  0.019201   , -0.0803474 , -0.0793537 , -0.0205793   ,-0.0727073  ,-0.157252   , 0.0568553,  0.00086636 , 0.025184   ,-0.0920936  , -0.0298451   , 0.0322593  ,-0.239272    ,-0.00995694 ,-0.0828518       },
                {  0.00928677 , -0.303428   ,  0.229061  , -0.0578978 , -0.0289326   ,-0.125522   ,-0.158321   , 0.0108275,  0.0323272  ,-0.0765753  , 0.038425   ,  0.0772672   ,-0.299761   , 0.0214265   ,-0.0393775  , 0.0617125       },
                { -0.103645   , -0.426519   ,  0.436475  , -0.190352  ,  0.0726789   , 0.0065684  ,-0.103577   ,-0.119229 , -0.0526428  ,-0.0279118  ,-0.0375922  ,  0.0342445   ,-0.457526   , 0.0857592   ,-0.0992875  , 0.204431        },
                { -0.114849   , -0.12218    ,  0.139829  ,  0.0212831 , -0.0216212   ,-0.110591   ,-0.0733878  ,-0.0270856,  0.00427628 ,-0.0934266  ,-0.0165075  ,  0.0566009   ,-0.228425   ,-0.106205    ,-0.0708361  , 0.0791605       },
                {  0.024369   , -0.0988615  ,  0.030681  ,  0.0448152 ,  0.0617497   ,-0.0492196  ,-0.154195   , 0.0459125, -0.119693   ,-0.00157884 , 0.0570849  ,  0.0681339   ,-0.120249   ,-0.0578721   ,-0.140288   ,-0.102706        },
                { -0.0175884  , -0.23231    ,  0.231084  , -0.122876  ,  0.0220297   ,-0.136937   ,-0.0757679  ,-0.0909513, -0.0854745  ,-0.0506843  , 0.0992472  , -0.06979     ,-0.32578    ,-0.026512    ,-0.0031719  , 0.123475        },
                {  0.0166068  ,  0.232897   , -0.302476  ,  0.0927169 , -0.113096    ,-0.0376174  ,-0.0818573  ,-0.0806133, -0.067503   ,-0.0617156  ,-0.0134945  , -0.0181604   , 0.174181   ,-0.281252    , 0.00323893 ,-0.0992038       },
                { -0.0150934  ,  0.386499   , -0.283006  ,  0.077024  , -0.109004    ,-0.0882216  ,-0.125362   , 0.0724566,  0.00601525 ,-0.0599175  ,-0.0875663  ,  0.0132124   , 0.200859   ,-0.240656    , 0.163282   ,-0.202061        },
                {  0.00978648 , -0.0864395  ,  0.150033  , -0.0421141 , -0.0360887   ,-0.0411548  ,-0.0338059  ,-0.0443829, -0.0799023  ,-0.0329091  , 0.0672808  ,  0.00992111  ,-0.305444   ,-0.0287588   ,-0.0556225  ,-0.00803446      },
                {  0.0552331  ,  0.416713   , -0.260209  ,  0.0156118 , -0.00025755  , 0.0159943  ,-0.121465   , 0.0425508, -0.0137983  ,-0.0132208  ,-0.0255043  ,  0.00354523  , 0.157717   ,-0.36214     , 0.0849192  ,-0.137969        },
                { -0.000815694, -0.155471   ,  0.223643  , -0.144855  , -0.0955902   ,-0.085563   ,-0.111921   ,-0.102321 ,  0.0285647  , 0.0176353  ,-0.0793825  , -0.0677197   ,-0.253549   ,-0.0465909   ,-0.0526459  ,-0.053567        },
                { -0.0468926  ,  0.0995765  , -0.208323  ,  0.00315331, -0.097041    , 0.0194007  ,-0.121871   ,-0.0899003,  0.0373778  ,-0.103208   ,-0.0313274  ,  0.050742    , 0.093274   ,-0.225768    ,-0.0294168  ,-0.169656        },
                { -0.0918237  , -0.341608   ,  0.259489  , -0.1654    ,  0.0499155   , 0.00518534 ,-0.080976   ,-0.0997102,  0.0374697  ,-0.09248    ,-0.0594991  , -0.016157    ,-0.332344   , 0.000736067 ,-0.00179735 , 0.0603484       },
                { -0.0118835  , -0.0796475  ,  0.161793  , -0.053388  , -0.024974    ,-0.0281691  ,-0.071308   ,-0.0738006, -0.0887197  ,-0.115937   , 0.0566453  , -0.0692152   ,-0.244359   ,-0.10419     , 0.0116763  ,-0.0969212       },
                { -0.0980872  ,  0.181838   , -0.169084  , -0.0103566 ,  0.0158364   ,-0.0609068  ,-0.159323   ,-0.0680654, -0.0403406  , 0.0416094  ,-0.0623386  ,  0.00555897  , 0.105387   ,-0.286896    , 0.0218766  ,-0.100696        },
                {  0.0500854  ,  0.345587   , -0.328305  ,  0.0545981 , -0.00258318  ,-0.0846263  ,-0.203357   ,-0.0703211, -0.0273943  ,-0.0217008  ,-0.0150267  ,  0.0630778   , 0.129452   ,-0.224713    , 0.027891   ,-0.141203        },
                { -0.12944    , -0.209828   ,  0.283631  , -0.00243367,  0.0631797   ,-0.128004   , 0.0133235  ,-0.0559497, -0.123342   , 0.00690915 ,-0.0606559  ,  0.0167291   ,-0.31245    ,-0.104299    ,-0.100061   , 0.11452         },
                { -0.0973388  , -0.500237   ,  0.447048  , -0.265607  , -0.028596    , 0.037338   ,-0.104759   ,-0.121973 , -0.111291   , 0.0239129  , 0.00671468 , -0.0475664   ,-0.46801    , 0.0980228   ,-0.0549956  , 0.0743018       },
                {  0.0643787  ,  0.178334   , -0.110621  ,  0.0741854 , -0.11359     ,-0.0271766  ,-0.117232   , 0.104816 ,  0.0105461  , 0.0416605  , 0.0590765  , -0.00847572  ,-0.0718474  ,-0.1218      ,-0.0657144  ,-0.160287        },
                { -0.00930035 , -0.0662878  ,  0.019491  , -0.0663751 ,  0.0199532   ,-0.0211331  ,-0.133159   , 0.0804412,  0.0266096  ,-0.0793471  ,-0.033991   , -0.114202    ,-0.122543   ,-0.052136    ,-0.0992783  ,-0.0328915       },
                { -0.135816   , -0.0703345  , -0.0408151 , -0.00772275, -0.077628    ,-0.099311   ,-0.0633923  ,-0.0384143, -0.00672346 , 0.0567995  , 0.000207789,  0.000221838 ,-0.0426115  ,-0.143577    ,-0.0825234  ,-0.0937878       },
                { -0.0935245  ,  0.00961292 , -0.0478365 ,  0.0345575 , -0.0541619   ,-0.0974591  ,-0.130874   , 0.0686138, -0.0755602  ,-0.0712943  , 0.0579053  ,  0.088003    ,-0.114749   ,-0.161417    ,-0.00936431 , 0.0521587       },
                { -0.0244367  ,  0.325944   , -0.180229  ,  0.156389  , -0.0344615   , 0.0115929  ,-0.178174   ,-0.0892434, -0.131766   , 0.0162292  , 0.0337433  , -0.0351675   , 0.152936   ,-0.335329    ,-0.042021   ,-0.061248        },
                { -0.00947372 ,  0.232086   , -0.254319  ,  0.117951  ,  0.0104133   ,-0.135262   ,-0.153585   , 0.0520149,  0.0616065  ,-0.0995728  , 0.00932597 , -0.0408796   , 0.0416549  ,-0.114338    , 0.107225   ,-0.094266        },
                {  0.0100387  ,  0.144901   , -0.165088  , -0.0413865 ,  0.0153596   ,-0.0290537  ,-0.105589   , 0.039989 , -0.0607449  ,-0.0353788  ,-0.0557765  , -0.00694306  , 0.0261953  ,-0.234011    , 0.0575361  ,-0.140134        },
                { -0.0765009  , -0.0629238  ,  0.135557  , -0.0110204 ,  0.0392504   ,-0.0613452  ,-0.0815355  ,-0.0610068, -0.042111   , 0.00874397 ,-0.0295427  ,  0.0216671   ,-0.23359    ,-0.0323453   ,-0.0131799  , 0.0378053       },
                { -0.0134349  ,  0.425105   , -0.350825  ,  0.103486  ,  0.0547316   ,-0.0832576  , 0.00552709 ,-0.0642743, -0.00852044 , 0.0439168  , 0.0352732  , -0.0466034   , 0.24308    ,-0.368176    , 0.179177   ,-0.212174        },
                { -0.0571913  ,  0.0774365  , -0.125534  ,  0.0649782 ,  0.0333533   , 0.00416311 ,-0.0868362  , 0.078969 , -0.112876   ,-0.0155859  , 0.0485282  ,  0.0798308   , 0.0644639  ,-0.199246    ,-0.0258247  ,-0.0723644       },
                { -0.0275103  , -0.094637   ,  0.0258355 , -0.0821732 , -0.0355459   ,-0.0513444  ,-0.206775   , 0.031797 , -0.073677   , 0.00963001 , 0.0581831  ,  0.0777212   ,-0.0308355  ,-0.0701265   ,-0.0549545  ,-0.045745        },
                { -0.0388602  ,  0.462841   , -0.426236  ,  0.185684  , -0.0309476   ,-0.026154   ,-0.0299469  , 0.0279361,  0.0378859  , 8.66783E-05, 0.05714    , -0.0710522   , 0.238078   ,-0.368316    , 0.0691143  ,-0.145314        },
                { -0.0673579  , -0.0978499  ,  0.0823673 , -0.038503  , -0.105533    ,-0.055644   ,-0.0592281  , 0.0854641, -0.0347618  ,-0.127404   , 0.0577643  ,  0.0629487   ,-0.30836    , 0.014598    ,-0.0966855  , 0.00506482      },
                { -0.097397   , -0.00578735 ,  0.0591674 , -0.106553  , -0.11027     ,-0.0872866  ,-0.143122   , 0.0228355, -0.0132178  ,-0.123271   ,-0.0867974  , -0.00533397  ,-0.112334   ,-0.0420984   ,-0.0331213  ,-0.0334703       },
                { -0.057194   ,  0.187243   , -0.216139  ,  0.136066  , -0.0676258   ,-0.134137   ,-0.0864793  , 0.0763052, -0.110747   , 0.00326501 , 0.0418436  ,  0.0341082   , 0.0705723  ,-0.117799    , 0.0142632  ,-0.0690016       },
                {  0.050869   , -0.183271   ,  0.208076  , -0.0707156 , -0.0346953   ,-0.0861019  ,-0.13529    ,-0.099667 , -0.0506054  ,-0.0249224  , 0.00190126 , -0.0204826   ,-0.17938    ,-0.0493176   ,-0.119973   , 0.00466494      },
                { -0.0353315  , -0.224535   ,  0.191258  , -0.161052  ,  0.0659614   , 0.00170967 ,-0.105769   ,-0.0530204,  0.0532531  , 0.0127822  ,-0.0453174  ,  0.0677216   ,-0.381882   , 0.0299372   ,-0.0868918  , 0.131325        },
                { -0.0179109  , -0.296147   ,  0.206722  , -0.0749489 ,  0.0832982   ,-0.0845387  ,-0.00501509 , 0.063334 ,  0.0354107  ,-0.0383123  , 0.0627278  , -0.032192    ,-0.349677   ,-0.0708047   ,-0.0666879  , 0.0142287       },
                { -0.0910537  ,  0.508247   , -0.376878  ,  0.0842985 , -0.107151    , 0.0177641  ,-0.0328304  ,-0.0314814, -0.0128349  , 0.0496798  , 0.0608482  , -0.0624318   , 0.249112   ,-0.340125    , 0.195406   ,-0.1335          },
                {  0.0198864  , -0.131079   ,  0.0887013 , -0.0489974 , -0.00912316  ,-0.079023   ,-0.125157   ,-0.0273961, -0.12848    ,-0.0980405  ,-0.0184189  ,  0.0668164   ,-0.0882497  ,-0.0890521   ,-0.0181754  ,-0.00776375      },
                { -0.0671894  ,  0.00451538 , -0.00402165,  0.0447796 , -0.0160829   ,-0.102229   ,-0.16724    ,-0.0354738, -0.0206505  ,-0.0246266  , 0.076832   ,  0.0355654   ,-0.11955    ,-0.107696    , 0.0242609  , 0.020414        },
                { -0.0575566  ,  0.199489   , -0.22139   , -0.0164529 , -0.0303191   ,-0.0444935  ,-0.00100932 , 0.0916623, -0.106708   ,-0.0326681  ,-0.10392    , -0.0331755   , 0.113628   ,-0.277559    ,-0.0299426  ,-0.101023        },
                { -0.00165624 , -0.000315359, -0.178087  , -0.0856324 , -0.0645009   ,-0.0057974  ,-0.0567942  ,-0.0678655,  0.0512134  , 0.0188     ,-0.0408081  ,  0.0111738   ,-0.0631949  ,-0.100905    ,-0.0119377  ,-0.162224        }
            };
                theta2Arr = new double[hiddenLayerSize + 1] { 0.0746432, 0.0456006, 0.0291753, 0.130755, 0.284695, 0.246873, 0.264067, -0.0402303, 0.146283, -0.283358, -0.517578, -0.141445,
                                                         -0.0198346, -0.298861, 0.386286, 0.487475, -0.135743, 0.518751, -0.200701, 0.252256, -0.33, -0.121981, 0.310782, 0.423479, -0.280487,
                                                         -0.533661, 0.201049, -0.028842, 0.0537553, 0.0535022, 0.404672, 0.3077, 0.261792, -0.090502, 0.589654, 0.193421, -0.00754473, 0.613719,
                                                         -0.144372, -0.0250852, 0.275824, -0.173964, -0.29204, -0.270619, 0.638501, -0.0548331, 0.0299008, 0.322202, 0.12808 };

            }
            else if (fileName == "24")
            {
                theta1Arr = new double[hiddenLayerSize, inputLayerSize + 1]{

              {    -0.184248 , -0.0959761 , -0.104836,   -0.0144113,   0.0201807, -0.0556705,  -0.171359,   -0.055866,  -0.063645,  -0.0309157, 0.00577247,  -0.0386475,    -0.089434,   -0.143811,   -0.182058, 0.00833371 },
              {    -0.111083 ,  0.0225318 , 0.0225021,    0.0685628,  -0.0318689,  -0.103817,  -0.183684,   -0.026184,  -0.114905,   0.0462598,  0.0155361,   0.0292767,    -0.189282,   -0.123308,   -0.163928, -0.0735331 },
              {    -0.071165 ,   0.190719 ,-0.0580392,   -0.0231923,   -0.109558, -0.0687819,  -0.224233,   0.0379199,  0.0359187,  -0.0796052, -0.0908275,  -0.0380854,    -0.125614,   -0.163501, -0.00967901,  -0.134005 },
              {    -0.129627 ,   0.408524 , -0.203389,   0.00866328,  0.00848603,  0.0169583,  -0.179078, -7.9462E-06,  0.0312683,  -0.0857605,   0.094035,  -0.0734854,   -0.0339299,   -0.254198,    0.203704,   -0.32845 },
              {   -0.0955468 ,   0.253392 , -0.105147,     0.100061,   -0.134046,   -0.11183,  -0.166163,   0.0316088, -0.0287884,   -0.119669,  0.0810446, -0.00048796,    0.0419812,   -0.286085, 0.000305625,  -0.300994 },
              {   -0.0949834 ,   0.252103 , -0.228816,     0.030813,   0.0454893, -0.0286299,  -0.086389,  -0.0218176, -0.0581231,  -0.0222687, -0.0317358,    0.012455,   -0.0598985,   -0.384233,   0.0554946,  -0.230117 },
              {   -0.0885643 ,  -0.248453 ,  0.078803,   0.00912543,    0.070874,   -0.14947,  -0.150612,   -0.117375,  -0.134846,  -0.0249297,  -0.123929,  -0.0344058,    -0.116744,  -0.0711399,   -0.162782, 0.00650117 },
              {    0.0138769 ,  0.0623207 , -0.108525,     -0.08259,  -0.0276933,  -0.112045,  -0.202504,   0.0700112,-0.00906565,    0.017984, -0.0836027,  -0.0592909,   -0.0525531,   -0.315331,  0.00874745,  -0.144198 },
              {      0.01451 ,  -0.547229 ,  0.424125,   -0.0775792, -0.00825747,  -0.157165,  -0.142023,   -0.127679,  0.0865959,  -0.0946207, -0.0821345,    0.237511,    -0.225663, -0.00336342,   -0.321785,   0.317059 },
              {    -0.072967 ,  -0.845666 ,  0.777868,    -0.426502,    0.103433, -0.0159089,  -0.120487,   -0.381377,   0.120114,    -0.13372,  -0.250446,    0.333807,    -0.255446,   0.0445727,    -0.60395,   0.703576 },
              {    -0.116909 ,  -0.286678 ,  0.259557,    0.0917984,  -0.0256856,  -0.122504, -0.0668055,   -0.092759,  0.0101057,  -0.0923073,  -0.092667,    0.147205,    -0.190774,  -0.0916434,   -0.243533,   0.213779 },
              {   0.00625236 ,  -0.160809 , 0.0660275,    0.0516069,   0.0520783, -0.0927237,  -0.181137,   0.0191392,  -0.126499,  -0.0206608,  0.0244871,   0.0886985,    -0.163064,    -0.10875,   -0.223321, -0.0803839 },
              {    -0.015005 ,  -0.474374 ,  0.421614,    -0.162907,   0.0258709,  -0.171009, -0.0890974,   -0.209599, -0.0300023,  -0.0656821, -0.0392058,   0.0661764,    -0.200523,  0.00967296,   -0.329543,    0.31877 },
              {   -0.0198252 ,    0.49272 , -0.401661,    0.0355186,   -0.137902, -0.0549895,  -0.142531,  0.00902823, -0.0841002,  -0.0340974,  0.0627793,   -0.133799,    0.0316849,    -0.38199,    0.200488,   -0.30272 },
              {   -0.0812274 ,   0.791097 , -0.379358,    0.0936591,   -0.164204,  -0.033356,  -0.230828,    0.306612,  -0.051937,  -0.0304174, 0.00960635,    -0.18362,     0.112836,   -0.172208,    0.458609,  -0.564153 },
              {  -0.00256754 ,  -0.208446 ,   0.24991,     -0.00912,  -0.0378586, -0.0812893, -0.0549188,  -0.0922747, -0.0760441,  -0.0508515,0.000904777,     0.06864,    -0.295357,  -0.0342011,   -0.227641,  0.0573586 },
              {    0.0339908 ,   0.905573 , -0.462834,   -0.0543386,   0.0192821,  0.0429981, -0.0910284,    0.218243,-0.00637704,    0.122198,   0.144252,   -0.201121,    0.0121551,   -0.438164,    0.526531,   -0.45738 },
              {  -0.00256794 ,  -0.326294 ,  0.349399,    -0.226517,  -0.0692657,  -0.139155,  -0.106047,   -0.194573,  0.0668205, -0.00144294,  -0.160501,   0.0166977,    -0.180813,  -0.0289283,   -0.266834,  0.0838976 },
              {   -0.0782058 ,   0.213457 , -0.259299, -0.000521339,   -0.115121, -0.0179174,  -0.179333,  -0.0506125,  0.0204515,  -0.0984117,-0.00459364, -0.00831078,    -0.011881,   -0.307914,    0.044389,  -0.283715 },
              {   -0.0937243 ,  -0.638733 ,  0.480997,    -0.326875,   0.0624853, -0.0548117, -0.0970615,   -0.278127,   0.138354,   -0.146145,  -0.211781,    0.159595,    -0.204927,  -0.0225698,   -0.377532,   0.353972 },
              {   -0.0249129 ,  -0.166492 ,  0.231684,   -0.0344313,  -0.0320864,  -0.060511,  -0.094475,   -0.101327, -0.0924671,   -0.131324, 0.00624453,  -0.0352355,    -0.244325,      -0.106,    -0.11868, -0.0686983 },
              {    -0.119193 ,   0.366502 , -0.253151,   -0.0316357,   0.0267551, -0.0807857,  -0.188461,  -0.0170993, -0.0411909,   0.0641898,-0.00240418,  -0.0702094, -0.000969474,   -0.382446,    0.174289,  -0.227823 },
              {    0.0255031 ,   0.686741 , -0.452058,    0.0149332,  0.00855783,  -0.071863,  -0.233161,    0.046013, -0.0282451,   0.0304986,  0.0915499,  -0.0699697, -0.000106438,   -0.315212,    0.309628,  -0.363433 },
              {    -0.114679 ,   -0.45882 ,  0.486502,    0.0785439,   0.0548073,  -0.122202, 0.00764299,   -0.173358, -0.0852027,  -0.0145332,  -0.176377,    0.181254,    -0.222781,  -0.0847211,   -0.368902,   0.367632 },
              {   -0.0701509 ,  -0.850517 ,  0.769526,    -0.554045,   0.0472106, -0.0419504,  -0.128181,   -0.361656,  0.0494587,  -0.0756957,  -0.205094,    0.206662,    -0.248048,   0.0767527,   -0.554278,   0.489011 },
              {    0.0292034 ,   0.322148 , -0.174207,    0.0438974,   -0.137672, -0.0231465,  -0.173501,    0.184659, 0.00640072,    0.049005,  0.0946046,  -0.0945151,    -0.132003,   -0.142099,   0.0207297,    -0.3211 },
              {   -0.0313606 ,  -0.134259 , 0.0545918,   -0.0897833,   0.0132668, -0.0726031,  -0.166714,   0.0483658,  0.0268155,   -0.104204, -0.0701567,  -0.0942804,    -0.161233,   -0.105739,   -0.195878, -0.0115057 },
              {     -0.15907 , -0.0923859 ,-0.0336134,   -0.0148094,  -0.0834953,  -0.137954,  -0.105065,  -0.0463169, -0.0134565,   0.0395781, -0.0174801,  -0.0024751,    -0.091188,    -0.19347,   -0.130722,  -0.111418 },
              {    -0.117129 ,-0.00537408 ,-0.0447305,    0.0301222,  -0.0617586,  -0.133732,  -0.170454,   0.0648437, -0.0823259,  -0.0826456,  0.0409032,   0.0801954,    -0.160609,   -0.204948,   -0.054932,  0.0223559 },
              {   -0.0578388 ,   0.624134 , -0.299192,    0.0617825,   -0.038668, 0.00434974,  -0.227749,  0.00728529,  -0.118786,   0.0672415,    0.11605,   -0.163871,    0.0587431,   -0.406346,    0.167871,  -0.291686 },
              {   -0.0467824 ,    0.46863 , -0.351325,    0.0559562,   0.0114078,  -0.138613,  -0.208404,    0.161209,  0.0387559,  -0.0830996,  0.0790778,   -0.155445,    -0.065518,   -0.168838,    0.285658,  -0.302055 },
              {   -0.0142992 ,   0.315954 , -0.248959,    -0.059998,   0.0234199,  -0.049115,  -0.127763,   0.0999048,  -0.061564,  -0.0138266, 0.00481772,  -0.0901038,   -0.0707063,   -0.305406,    0.200561,  -0.277539 },
              {    -0.093098 ,  -0.180999 ,  0.218666,    0.0148073,   0.0283564,  -0.104445,  -0.101851,   -0.106944, -0.0404098, -0.00867184, -0.0892441,   0.0719748,    -0.237284,  -0.0507399,   -0.169105,   0.097764 },
              {   -0.0434497 ,   0.985376 , -0.593798,   -0.0456972,   0.0687089, -0.0338259,  0.0529211,    0.154843, -0.0384499,    0.167777,   0.238615,    -0.27266,    0.0329124,   -0.513622,    0.714478,  -0.544837 },
              {    -0.098545 ,   0.162295 , -0.173508,    0.0291925,   0.0215317, -0.0505376,  -0.159417,    0.115421,  -0.128996,  -0.0225697,  0.0666314,   0.0159411,   -0.0429511,   -0.283876,   0.0091217,  -0.193035 },
              {   -0.0513186 ,  -0.159624 , 0.0559041,    -0.102893,  -0.0394161,  -0.102968,   -0.24112,     0.00401, -0.0764348,  -0.0130312,  0.0208696,   0.0936905,   -0.0728494,   -0.124533,   -0.150162, -0.0335035 },
              {   -0.0817659 ,    1.01386 , -0.617272,    0.0611922,  -0.0338712,  0.0478156, -0.0642555,    0.263028,   0.018413,    0.121853,   0.230382,   -0.308374,    0.0771407,   -0.422594,    0.536135,  -0.527008 },
              {   -0.0769794 ,  -0.213133 ,   0.17448,   -0.0139789,   -0.100891, -0.0898655, -0.0763152,   0.0356196,  -0.031716,   -0.143514, -0.0048126,    0.125014,    -0.308623, -0.00699071,   -0.249939,  0.0805333 },
              {    -0.115715 , -0.0677065 , 0.0913449,    -0.125454,   -0.110249,   -0.12502,  -0.171109, -0.00250817, -0.0136103,   -0.139206,  -0.119091,   0.0127377,     -0.14095,  -0.0800686,   -0.119405, -0.0163039 },
              {    -0.108393 ,   0.368419 , -0.285005,    0.0917545,   -0.098766,  -0.147942,  -0.177885,    0.180996,  -0.150283, -0.00366744,  0.0895813,  -0.0777963,   -0.0429814,   -0.166039,    0.128408,  -0.270213 },
              {    0.0499477 ,  -0.376599 ,  0.338504,    -0.127116,  -0.0162282,   -0.12938,  -0.130833,   -0.202507, -0.0135943,  -0.0410279,  -0.090449,   0.0810279,    -0.129937,  -0.0616779,    -0.33467,   0.175526 },
              {    -0.039939 ,  -0.518404 ,   0.40314,    -0.305811,   0.0735282, -0.0680191,  -0.108501,   -0.222589,    0.13834,  -0.0458006,  -0.192878,    0.237124,     -0.25841,   0.0208128,   -0.449439,   0.407124 },
              {   -0.0187675 ,  -0.508489 ,  0.385733,    -0.101194,   0.0733277,   -0.12732,  -0.012554,  -0.0552728,  0.0872581,  -0.0674428, -0.0549416,   0.0966276,    -0.249468,  -0.0573355,   -0.352686,   0.206324 },
              {    -0.176555 ,   0.947941 , -0.515668,     0.145999,   -0.173957,   0.139124,   -0.11178,    0.284664,  -0.122929,    0.116233,   0.171792,   -0.329151,     0.239548,    -0.10575,     0.52957,  -0.621757 },
              {   0.00334374 ,  -0.242989 ,  0.153136,   -0.0518464,  -0.0139252,  -0.113669,  -0.147827,  -0.0713182,  -0.127187,   -0.108459, -0.0780847,     0.11164,    -0.091954,   -0.114583,   -0.160106,  0.0484779 },
              {   -0.0923182 , -0.0213966 ,0.00596378,    0.0420997,  -0.0246603,  -0.143992,  -0.207532,   -0.042406, -0.0279934,  -0.0403362,  0.0556692,   0.0322877,    -0.168177,   -0.155005,  -0.0350273,-0.00429517 },
              {   -0.0910386 ,   0.409138 , -0.307109,   -0.0337449,   -0.040704, -0.0614653,  -0.051467,    0.168632,  -0.119967,  -0.0182355, -0.0369975,   -0.131514,   -0.0202875,   -0.373959,    0.133953,  -0.270011 },
              {    -0.034077 ,  0.0368945 , -0.205396,   -0.0889014,  -0.0773594, -0.0525253,  -0.115534,  -0.0494324,  0.0338638,  0.00515053, -0.0341683,   -0.022083,    -0.165148,   -0.188671, -0.00203828,   -0.23103 }
            };
                theta2Arr = new double[hiddenLayerSize + 1] {0.133222 , -0.0820658 , -0.0588114 , 0.116744 , 0.367728 , 0.196301 , 0.254071 , -0.197732 , 0.115314 , -0.479893,  -0.793012 , -0.341784
                                                        ,-0.151651 , -0.45677 , 0.435444 , 0.434882  ,-0.269125 , 0.753395 , -0.363438,  0.236426 , -0.523571 , -0.196396 , 0.373445 , 0.556647
                                                        ,-0.522878,  -0.760477,  0.236906,  -0.126588 , -0.0553076 , -0.0155549 , 0.473397 , 0.392241,  0.342724,  -0.240654,  0.843441 , 0.160228
                                                        ,-0.134267,  0.746402,  -0.268823,  -0.124949,  0.251653,  -0.385691,  -0.503801,  -0.420173,  0.442952 , -0.228585,  -0.0345129,  0.364277,  0.106849};
            }
        }
        else
        {
            if (File.Exists("NetWeights\\" + fileName))
            {
                //used to track which line is being read, if greater than number of rows in theta1 then we must be reading theta2
                int theta1Row = 0;

                StreamReader sr = new StreamReader("NetWeights\\" + fileName);
                while (!sr.EndOfStream)
                {
                    string line = sr.ReadLine();

                    string[] valueStrings = line.Split(' ');
                    List<double> doubleList = new List<double>();
                    double d;
                    foreach (string s in valueStrings)
                    {
                        //Convert each value in the line to a double
                        if (double.TryParse(s, out d))
                        {
                            doubleList.Add(d);
                        }
                    }

                    for (int i = 0; i < doubleList.Count; i++)
                    {
                        if (theta1Row == theta1Arr.GetLength(0))
                        {
                            theta2Arr[i] = doubleList[i];
                        }
                        else
                        {
                            theta1Arr[theta1Row, i] = doubleList[i];
                        }
                    }
                    theta1Row++;
                }
                sr.Close();
            }
            else
            {
                //If we can't find a valid file, initialize with random theta values.
                Debug.Log("No file found with name: " + fileName + ". Initializing with random theta values");
                InitializeRandomTheta();
            }
        }
        //Create MathNet matrices based on values read from txt file.
        theta1 = DenseMatrix.OfArray(theta1Arr);
        theta2 = DenseVector.OfArray(theta2Arr).ToRowMatrix();

        //Create blank matrices for eligibility trace values.
        e_theta1 = DenseMatrix.Create(hiddenLayerSize, inputLayerSize + 1, 0);
            e_theta2 = DenseMatrix.Create(hiddenLayerSize + 1, 1, 0);
        }

    // Initialize network with random theta values
    public NeuralNetwork() {

        theta1Arr = new double[hiddenLayerSize, inputLayerSize + 1];
        theta2Arr = new double[hiddenLayerSize + 1];

        //Populate theta1Arr & theta2Arr with random values
        InitializeRandomTheta();

        //convert theta arrays into matrices
        theta1 = DenseMatrix.OfArray(theta1Arr);
        theta2 = DenseVector.OfArray(theta2Arr).ToRowMatrix();

        //blank matrices for eligibility trace
        e_theta1 = DenseMatrix.Create(hiddenLayerSize, inputLayerSize + 1, 0);
        e_theta2 = DenseMatrix.Create(hiddenLayerSize + 1, 1, 0);
    }

    //Writes neural network to NetWeights\fileName.txt
    public bool SaveToFile(string fileName)
    {
        StreamWriter sw = new StreamWriter(fileName + ".txt");
        sw.Write(theta1.ToMatrixString(hiddenLayerSize,inputLayerSize+1));
        sw.Write(theta2.ToMatrixString(1,hiddenLayerSize +1));
        sw.Close();
        Debug.Log("WROTE TO FILE");
        return true;
    }

    //Fills theta1Arr and theta2Arr with random numbers from -0.1:0.1
    void InitializeRandomTheta()
    {

        System.Random random = new MathNet.Numerics.Random.SystemRandomSource();

        //Populate arrays with random values -0.1:0.1, up to 8 sig fig
        for (int i = 0; i < hiddenLayerSize; i++)
        {
            theta2Arr[i] = random.NextDouble() * (2 * init_epsilon) - init_epsilon;

            for (int j = 0; j <= inputLayerSize; j++)
            {
                theta1Arr[i, j] = random.NextDouble() * (2 * init_epsilon) - init_epsilon;

            }
        }
        theta2Arr[hiddenLayerSize] = random.NextDouble() * (2 * init_epsilon) - init_epsilon;     
    }

    public void BackPropagate(FFData prevRun,FFData currRun, double alpha, double lambda)
    {
        theta2 = theta2 + alpha * (currRun.a3[0,0] - prevRun.a3[0,0]) * e_theta2.Transpose();

        theta1 = theta1 + alpha * (currRun.a3[0,0] - prevRun.a3[0,0]) * e_theta1;

        FFData newRun = FeedForward(currRun.input);

        e_theta2 = lambda * e_theta2 + (1 - newRun.a3[0,0]) * newRun.a3[0,0] * newRun.a2.Transpose();

        e_theta1 = lambda * e_theta1 + ((1 - newRun.a3[0,0]) * newRun.a3[0,0] * (((1 - newRun.a2.RemoveColumn(0)).PointwiseMultiply(newRun.a2.RemoveColumn(0))).PointwiseMultiply(theta2.RemoveColumn(0)).Transpose()) * newRun.a1);
    }

    //Calculates partial derivatives for weights. No longer necessary
    //void PartialDerivatives(out Matrix<double> delta1, out Matrix<double> delta2, FFData run, FFData nextRun)
    //{
    //    Matrix<double> d3 = run.a3.Subtract(nextRun.a3);
    //    Matrix<double> tempTheta2 = DenseMatrix.Create(theta2.RowCount, theta2.ColumnCount, 0);
    //    theta2.CopyTo(tempTheta2);
    //    tempTheta2 = tempTheta2.RemoveColumn(0);
    //    Matrix<double> u = MatrixSigmoidGradient(run.z2);
    //    Matrix<double> d2 = (tempTheta2.TransposeThisAndMultiply(d3));
    //    d2 = d2.Transpose().PointwiseMultiply(u);
    //
    //    delta1 = d2.Transpose().Multiply(run.a1);
    //    delta2 = d3.Multiply(run.a2);
    //}

    //Mean squared error cost function. No longer necessary
    //public Vector<double> CostFunction(FFData prevRun, FFData currRun)
    //{
    //    return 0.5 * prevRun.a3.Subtract(currRun.a3);//Mathf.Pow((float)(prevRun.a3.Subtract(currRun.a3), 2);
    //}

    public void ResetTraceValues()
    {
        e_theta1 = DenseMatrix.Create(hiddenLayerSize, inputLayerSize + 1, 0);
        e_theta2 = DenseMatrix.Create(hiddenLayerSize + 1, 1, 0);
    }

    // Update is called once per frame
    public FFData FeedForward (double[] _inputFeatures) {

        FFData data = new FFData();

        data.input = _inputFeatures;

        //Add bias unit to input array
        data.a1 = DenseMatrix.Create(1, 1, 1).Append(DenseVector.OfArray(_inputFeatures).ToRowMatrix());

        //Multiple input array (a1) by weights for each node in hidden layer to produce number at each node
        data.z2 = data.a1.Multiply(theta1.Transpose());

        //Run logistic function on results to squash
        data.a2 = MatrixSigmoid(data.z2);

        //Add bias unit to results of hidden layer
        data.a2 = DenseMatrix.Create(1, 1, 1).Append(data.a2);

        //Multiply results of hidden layer with weights for output node to produce final result
        data.z3 = data.a2.Multiply(theta2.Transpose());

        //Squash final result
        data.a3 = MatrixSigmoid(data.z3);

        //As we are using only 1 output, result is a 1x1 matrix
        return data;
	}

    static Matrix<double> MatrixSigmoidGradient(Matrix<double> _inMat)
    {
        Matrix<double> u = MatrixSigmoid(_inMat);
        return u.PointwiseMultiply(1 - u);
    }

    //Computes sigmoid function for every element in a matrix
    static Matrix<double> MatrixSigmoid(Matrix<double> _inMat)
    {
        Matrix<double> outMat = DenseMatrix.Create(_inMat.RowCount, _inMat.ColumnCount, 0);

        for(int i = 0; i < _inMat.RowCount; i++)
        {
            for (int j = 0; j < _inMat.ColumnCount; j++)
            {
                outMat[i, j] = MathNet.Numerics.SpecialFunctions.Logistic(_inMat[i, j]);
            }
        }

        return outMat;
    }

    public NeuralNetwork Copy()
    {
        NeuralNetwork returnNet = new NeuralNetwork();
        theta1.CopyTo(returnNet.theta1);
        theta2.CopyTo(returnNet.theta2);
        e_theta1.CopyTo(returnNet.e_theta1);
        e_theta2.CopyTo(returnNet.e_theta2);

        return returnNet;
    }
}
